# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['randomCharacterPwd', 'memorablePwd', 'userChoicePwd', 'w', 'database', 'correctPwdType', 'usernameFree',
           'signInCorrect', 'signInCount']

# Cell
# My code is designed to be as if you are signing up to a website which offers to generate a password for you
import random
import string
import english_words as ew  # A library of most english words
import hashlib

#export
w=list(ew.english_words_alpha_set)
database = {}
#I have created a simple dictionary to act as a database

#export
correctPwdType = False
usernameFree = False
while usernameFree == False:
    username = input("What do you want your username to be? ")
    if username not in database.keys(): #check if their username is in the keys of the dictionary - I am using the username as the key
        usernameFree = True
        print("Nice choice! This username is available. ")
        database[username] = []
    else:
        print("Sorry - this username is unavailable - choose a different username. ")

while correctPwdType == False:
    passwordType = int(input(f"""Hey there {username}, there are three options for password:
    Option 1: (Auto-Generated) Random characters - for things like WiFi which will not be logged in to often - Very Secure
    Option 2: (Auto-Generated) Easy to remember but hard to guess - used for things logged into regularly
    Option 3: Choose password yourself
    Type 1, 2 or 3: """))   # asks user for preferred type of password
    if passwordType == 1 or passwordType == 2 or passwordType ==3:
        correctPwdType = True      #helps to ensure that an invalid answer is not enter
    else:
        passwordType = int(input("That's not a 1 or a 2 or a 3, pick again: "))

#export
def randomCharacterPwd(length,characters = string.ascii_letters+string.digits):
    "Defines how to make a random character password."
    data = ""
    salt = ""
    for x in range (0,2):
        saltChar = random.choice(characters) #A salt is a set of random characters that are either added to the front or the end of the password before hashing to ensure security. A salt means that if two people have the exact same password, their hash will be completely different, defending against Rainbow Table attacks
        salt = salt + saltChar
    for i in range (length):
        letter = random.choice(characters) #Generates random letters and numbers (user chooses amount - visible later)
        data = data + letter

    saltPwd = data + salt
    myhash = hashlib.sha256(saltPwd.encode('utf-8'))  #Hashing the password (after salt has been added)
    saltPwd_hashed = myhash.hexdigest()
    print("Your password: " +data)
    database[username]=[salt, saltPwd_hashed] # adds the username to the database with the salt and the hashed password


#export
def memorablePwd(words):
    characters = string.ascii_letters+string.digits
    data = ""
    salt = ""
    for x in range (0,2):
        saltChar = random.choice(characters)
        salt = salt + saltChar
    for i in range (words):
        randomWord = random.choice(w) # Generates random words (user chooses amount - visible later)
        data = data + randomWord

    saltPwd = data + salt
    myhash = hashlib.sha256(saltPwd.encode('utf-8'))
    saltPwd_hashed = myhash.hexdigest()
    print("Your password: " +data)
    database[username]=[salt, saltPwd_hashed]


#export
def userChoicePwd():
    characters = string.ascii_letters+string.digits
    data = input("Type your chosen password here: ") # Allows user to choose own password
    salt = ""
    for x in range (0,2):
        saltChar = random.choice(characters)
        salt = salt + saltChar

    saltPwd = data + salt
    myhash = hashlib.sha256(saltPwd.encode('utf-8'))
    saltPwd_hashed = myhash.hexdigest()
    print("Your password: " +data)
    database[username]=[salt, saltPwd_hashed]

#export
if passwordType == 1:
    numChars = int(input("How many characters would you like your password to be? "))
    randomCharacterPwd(numChars)

elif passwordType == 2:
    numWords = int(input("How many words would you like your password to be? "))
    memorablePwd(numWords)

else:
    userChoicePwd()

#export
signInCorrect = False

print(f"OK {username} - lets practice signing in.")
signInCount = 5

while signInCount > 0 and signInCorrect == False:
        signIn_username = input("Username: ")
        signIn_pwd = input("Password: ")
        if signIn_username in database.keys(): #Checks if username entered by user is in the keys of the dictionary
            salt, myhash = database[signIn_username]
            checkPwd = signIn_pwd + salt #If it is then it takes the salt and combines it with the password entered by user.
            userhash = hashlib.sha256(checkPwd.encode('utf-8'))
            checkPwd_hashed = userhash.hexdigest() #It then hashes that mixture of the password and salt
            if checkPwd_hashed == myhash: #If the hashes match - then they have signed in correctly
                print("Good job - you would have successfully logged in.")
                signInCorrect = True
            else:
                print("Username or password incorrect. Please try again.")

        else:
            print("Username or password incorrect. Please try again.")
        signInCount = signInCount - 1
        if signInCorrect == False:
            print(f"You have {signInCount} tries remaining to correctly enter your username and password.") #Stop people from randomly guessing the password - can obviously re-run the program for this example

